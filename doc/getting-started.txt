=============================
 Getting Started with Schevo
=============================

.. role:: raw-html(raw)
   :format: html

:Last Changed: $Date$

.. sectnum::

.. contents::


Basics
------

Installation
============

`Install on Windows <getting-started-win.html>`__

`Install on Unix <getting-started-unix.html>`__


Create the Project
==================

From the command-line (indicated by "$")

Create an folder "eval" which contains a "schema" directory::

  $ evo db schema eval

All following operations will happen within the directory::

  $ cd eval

The evolve command creates an "eval.evo" by default::

  $ evo db evolve


Simple Class
------------

Define a Schevo Class: Car
==========================

.. code-block:: Python

 # within /schema/schema_001.py

 class Car(E.Entity):
   """Type of car."""

   manufacturer = f.string()
   model = f.string()
   modelYear = f.integer()

   _key(manufacturer, model, modelYear)

   def __str__(self):
       return '%s %s %s' % (self.modelYear, \
         self.manufacturer, self.model)


Evolve the Database, Create Car Instances
=========================================

The evolve command evolves the database according to schema::

  $ evo db evolve

Use the navigator to create instances::

  $ evo nav

One to One Relation
-------------------

Define a Class: Owner
=====================

.. code-block:: Python

 # within /schema/schema_001.py

 class Owner(E.Entity):
    """Individual human being."""

    name = f.string()
    profession = f.string()

    _key(name)

    def __str__(self):
        return self.name


Define a Relation: 1:1
======================

.. code-block:: Python

 # within /schema/schema_001.py

 class Car (E.Entity):
    # ...
    modelYear = f.integer()
    owner = f.entity('Owner') # add this line


Evolve, Add Instances and 1:1 Relations
=======================================

::

  $ evo db evolve
  $ evo nav

One to Many Relation
--------------------

Define a Class: Driver
======================

.. code-block:: Python

 # within /schema/schema_001.py

 class Driver(E.Entity):
    """Individual human being."""

    name = f.string()
    licenseType = f.string()

    _key(name)

    def __str__(self):
       return self.name


Define a Relation: 1:N
======================

.. code-block:: Python

 # within /schema/schema_001.py

 class Driver(E.Entity):
    # ...
    car = f.entity('Car')


Evolve, add Instances with 1:N Relations
========================================

::

  evo db evolve
  evo nav

Many to Many Relation
---------------------

Define a Class: Road
====================

.. code-block:: Python

 # within /schema/schema_001.py

 class Road(E.Entity):
    """A Road. """

    name = f.string()
    length = f.integer()

    _key(name)

    def __str__(self):
        return self.name


Define a Relation Class: M:N
============================

.. code-block:: Python

 # within /schema/schema_001.py

 class Trip(E.Entity):
    """People can go places."""

    car = f.entity('Car')
    road = f.entity('Road')

    def __str__(self):
        return '%s is on %s' % (self.car, self.road)


Evolve, add Instances with M:N Relations
========================================

::

  evo db evolve
  evo nav



..
     Local Variables:
     mode: rst
     End: 

