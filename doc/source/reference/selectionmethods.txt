===================
 Selection Methods
===================


Overview
========

Many applications allow the user to select multiple objects in order
to perform an action on the group of objects or to show summary
information about the selection.

In your schema, define transactions and views that accept collections
(or "selections") of objects, and dynamically-generated user
interfaces may expose such transactions and views for use with
multiple selections.


Doctest setup
=============

This document also functions as a doctest::

    >>> from schevo.label import label
    >>> from schevo.schema import read
    >>> from schevo.test import DocTest
    >>> schema = read('doc.source.reference.schema_selectionmethod', 1)
    >>> t = DocTest(schema=schema)
    >>> db = t.db

The doctest uses the following schema::

    # <== include("reference/schema_selectionmethod/schema_001.py") ==>
    # <==end==>


Default methods
===============

Every `Entity` class defines a `selectionmethod` extent method called
`delete_selection` and labeled "Delete Selection"::

    >>> db.Cog.t.delete_selection   #doctest: +ELLIPSIS
    <extent method Cog.t_delete_selection ...

    >>> from schevo.decorator import isextentmethod, isselectionmethod
    >>> isextentmethod(db.Cog.t.delete_selection)
    True
    >>> isselectionmethod(db.Cog.t.delete_selection)
    True

    >>> label(db.Cog.t.delete_selection)
    u'Delete Selection'


Namespace iteration
===================

By default, `selectionmethod` method names are hidden when iterating
over a `t` or `v` namespace::

    >>> list(db.Cog.t)
    ['create']

Call a namespace, passing the `isselectionmethod` function, to get a
list of names non-hidden selection methods in that namespace::

    >>> list(db.Cog.t(isselectionmethod))
    ['delete_selection']


Hiding methods
==============

When hiding the `t_delete` method in an Entity class, the
`t_delete_selection` method is implicitly hidden, as is the case with
the `Sprocket` class in the schema above::

    >>> list(db.Sprocket.t(isselectionmethod))
    []


Using selection methods
=======================

Create a series of `Cog` instances::

    >>> cog1 = db.execute(db.Cog.t.create(name='One'))
    >>> cog2 = db.execute(db.Cog.t.create(name='Two'))
    >>> cog3 = db.execute(db.Cog.t.create(name='Three'))
    >>> cog4 = db.execute(db.Cog.t.create(name='Four'))

Choose two of them as the selection to delete::

    >>> selection = [cog2, cog3]

Create a `delete_selection` transaction to delete the selection::

    >>> tx = db.Cog.t.delete_selection(selection)
    >>> label(tx)
    u'Delete Selection'

Execute the transaction and verify the results::

    >>> db.execute(tx)
    >>> assert cog1 in db.Cog
    >>> assert cog4 in db.Cog
    >>> assert cog2 not in db.Cog
    >>> assert cog3 not in db.Cog
