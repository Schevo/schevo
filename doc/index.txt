========
 Schevo
========

.. role:: raw-html(raw)
   :format: html

:Last Changed: $Date$

.. sectnum::

.. contents::

----

Get Schevo!
===========

Go directly to to the `Getting Started on Windows <getting-started.html>`__.



What is Schevo?
===============

Schevo is a next-generation DBMS that focuses on the following:

- **Rapid Development**: Schevo includes features to make it easy and
  fun to create even the most complex of databases.  Not only is the
  schema syntax easy to write and understand, you can also quickly
  place initial values in your schema that are required by your
  database, and use the same syntax to create sets of sample data to
  use during development.

- **User Interface Generation**: Schevo provides user interface
  toolkits that take advantage of the richness of the database schema.
  You can use the full-featured Schevo Navigator to interact with your
  database without writing a single line of code outside of your
  database schema.  A PyQt-based toolkit is already available, and
  TurboGears and NuFox toolkits are in the works.

- **Rich Schema Definition**: The schema for a Schevo database is
  written in concise, easy-to-read Python code.  Not only does the
  schema describe how information in the database is structured, but
  also defines all transactions and rules that ensure database
  integrity.

- **Automated Schema Evolution**: Once a Schevo database is deployed
  and is used to store valuable data, you will inevitably make further
  changes to the structure of the database.  Schevo assists you in
  this task and makes it easy to restructure a database and facilitate
  the migration of data from one schema version to the next.

- **Transaction Based**: Schevo is designed from the ground up to
  protect your data.  All changes to a Schevo database must be done
  using transactions, and Schevo ensures that those transactions
  always leave the database in a consistent state.


Benefits of Schevo over SQL-based DBMSs
=======================================

- Native datatypes, with no need to worry about what length of string
  you need, or what size of integer.

- One file contains all schema logic.

- Rich behavior along with your data, in the form of Python methods.

- Calculated fields as part of the schema.

- Easily customized Create/Update/Delete transactions.

- Entity fields are much easier and smarter than foreign keys.

- Python references are much easier than SQL joins.


..
     Local Variables:
     mode: rst
     End: 

